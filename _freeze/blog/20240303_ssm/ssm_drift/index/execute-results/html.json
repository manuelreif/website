{
  "hash": "50079c4f1800c20a83cfdf472f9f2202",
  "result": {
    "markdown": "---\ntitle: \"State Space Models - Teil 2\"\ndescription: \"Es geht weiter in der Space Saga.\"\nauthor: Manuel Reif \ndate: 2024-03-11\ncategories: [R, stan, state-space-models]\ndraft: false \nhighlight-style: monokai\nformat:\n  html:\n    resources:\n        - shinylive-sw.js\nexecute:\n    eval: false\n    message: false\n    echo: false\nfilters:\n   - include-code-files\n---\n\n\n\n# With DRIFT \n\n\\begin{align}\ny_t &= \\tau_t + \\epsilon_t & \\quad \\text{measurement equation}\\\\\n\\tau_{t} &= \\tau_{t-1} + \\nu_{t-1} + \\xi_{t-1} & \\quad \\text{state/transition equation}\\\\\n\\nu_{t} &= \\nu_{t-1} + \\theta_{t-1} & \\quad \\text{drift equation}\n\\end{align}\n\n\n\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 700\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(data.table)\nlibrary(plotly)\n\nsim_state_space = function(time_points = 100,sigma = 1,tau = 2, drift = 0){\n\n    true_values = vector(mode = \"numeric\", length = time_points)\n\n    y = vector(mode = \"numeric\",length = time_points)\n\n    true_values[1] = 1 # true value 1\n    \n    for(i in 2:time_points){\n        true_values[i] <- true_values[i-1] + drift + rnorm(1, mean = 0, sd = sigma)\n    }\n\n    y = true_values + rnorm(time_points, mean = 0, sd = tau)\n    dt = data.table(true_values = true_values, y = y, time = 1:time_points)\n    dt    \n}\n# UI\nui <- fluidPage(\n    titlePanel(\"Local Level Model (with and without drift)\"),\n    fluidRow(\n        column(width = 12,\n               plotlyOutput(\"plot\") # Grafikausgabe über den Bedienelementen\n        )\n    ),\n    \n    fluidRow(\n        column(width = 1),\n        column(width = 5, numericInput(\"time_points\", \"Zeitpunkte:\", 100, min = 1, max = 1000)),\n        column(width = 6, sliderInput(\"sigma\", \"Sigma:\", min = 0.01, max = 5, value = 1, step = 0.01))\n    ),\n    \n    fluidRow(\n        column(width = 1),\n        column(width = 5, sliderInput(\"tau\", \"Tau:\", min = 0.01, max = 5, value = 2, step = 0.01)),\n        column(width = 6, sliderInput(\"drift\", \"Drift:\", min = -5, max = 5, value = 0, step = 0.01))   \n    )\n    \n)\n# Server-Logik bleibt gleich\nserver <- function(input, output) {\n    \n    output$plot <- renderPlotly({\n\n        dat <- sim_state_space(time_points = input$time_points, \n                               sigma = input$sigma, \n                               tau = input$tau, \n                               drift = input$drift)\n        \n        p <- ggplot(data = dat, aes(x = time, y = y)) + \n        geom_point(shape = 1, alpha = 0.8) + \n        geom_step(aes(y = true_values)) + \n        theme_bw()\n\n        ggplotly(p)\n\n    })\n    \n}\n# App ausführen\nshinyApp(ui = ui, server = server)\n```\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}